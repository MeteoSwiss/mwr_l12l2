import glob
import os

import datetime as dt
import numpy as np

from mwr_l12l2.utils.config_utils import get_inst_config, get_mars_config, merge_mars_inst_config
from mwr_l12l2.utils.file_uitls import abs_file_path


def write_mars_request(request_file, mars_conf, inst_conf_path, inst_conf_file_pattern='config_0*.yaml',
                       update_interval=6, availability_offset=6.5):
    """write request file for getting ECMWF model data using 'mars' for all stations that have a valid config file
    https://confluence.ecmwf.int/display/DAC/Dissemination+schedule

    """

    if not isinstance(update_interval, int):
        raise TypeError("input argument 'update_interval' is expected to be an integer. "
                        'Update cycles at fractions of an hour are currently not supported')

    # get config files ready
    if not isinstance(mars_conf, dict):
        mars_conf = get_mars_config(abs_file_path(mars_conf))
    inst_conf_path = abs_file_path(inst_conf_path)
    inst_conf_files = glob.glob(os.path.join(inst_conf_path, inst_conf_file_pattern))

    # infer last available forecast run from current time
    time_act_avail = dt.datetime.now(tz=dt.timezone(dt.timedelta(0))) - dt.timedelta(hours=availability_offset)
    analysis_time_strs = {'date': time_act_avail.strftime('%Y-%m-%d'),
                          'time': '{:02d}:00:00'.format((time_act_avail.hour//update_interval) * update_interval)}

    # initialise list of request file contents. It is a list of strings, one for each line.
    contents = ['# CARE: This file is automatically generated by {}. Do not edit.'.format(__file__),
                '',
                'retrieve,']

    # define part of request common to all stations (interpret None in time fields as most recent forecast)
    for key, val in mars_conf['request'].items():
        if key in analysis_time_strs and val is None:
            contents.append('  {}={},'.format(key, analysis_time_strs[key]))
        else:
            contents.append('  {}={},'.format(key, val))

    # define one request per stations (keys that are not re-set will be taken from previous request)
    for ind, inst_conf_file in enumerate(inst_conf_files):

        inst_conf = get_inst_config(inst_conf_file)
        conf = merge_mars_inst_config(mars_conf, inst_conf)
        lat_box = get_corner_coord(inst_conf['station_latitude'], conf['grid']['lat_offset'], conf['grid']['lat_res'])
        lon_box = get_corner_coord(inst_conf['station_longitude'], conf['grid']['lon_offset'], conf['grid']['lon_res'])

        if ind > 0:
            contents.append('retrieve,')
        contents.append('  grid={}/{},'.format(conf['grid']['lat_res'], conf['grid']['lon_res']))
        contents.append('  area={:.3f}/{:.3f}/{:.3f}/{:.3f},'.format(lat_box[1], lon_box[0], lat_box[0], lon_box[1]))
        contents.append('')
        # TODO: define target (output filename)

    with open(request_file, 'w') as f:
        f.write('\n'.join(contents))


def get_corner_coord(stn_coord, offset, resol):
    """get corners of a coordinate box around station coordinates which match model grid points"""
    stn_coord_rounded = round(stn_coord/resol) * resol  # round centre coordinate to model resolution
    return stn_coord_rounded + np.array(offset)


if __name__ == '__main__':
    write_mars_request('dummy_mars_request.txt', 'mwr_l12l2/config/mars_config.yaml', 'mwr_l12l2/config/')